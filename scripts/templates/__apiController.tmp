import Controller from './Controller';
import IoC from 'AppIoC';

export default class {{ModelName}}Controller extends Controller {
  constructor(
    {{modelName}}Repository,
    create{{ModelName}}Command,
    update{{ModelName}}Command,
    remove{{ModelName}}Command,
    commandExecuter
  ) {
    super();
    this.{{modelName}}Repository = {{modelName}}Repository;
    this.create{{ModelName}}Command = create{{ModelName}}Command;
    this.update{{ModelName}}Command = update{{ModelName}}Command;
    this.remove{{ModelName}}Command = remove{{ModelName}}Command;
    this.commandExecuter = commandExecuter;
  }

  find(req, res, next) {
    this.{{modelName}}Repository.find(req.viewer, req.query)
      .then(result => this.successResponse(res, { result }))
      .then(null, next);
  }

  findById(req, res, next) {
    this.{{modelName}}Repository.findById(req.viewer, req.params.{{modelName}}Id)
      .then(result => this.successResponse(res, { result }))
      .then(null, next);
  }

  create(req, res, next) {
    this.commandExecuter.execute(this.create{{ModelName}}Command, req.viewer, req.body)
      .then(result => this.successResponse(res, { result }))
      .then(null, next);
  }

  update(req, res, next) {
    this.commandExecuter.execute(this.update{{ModelName}}Command, req.viewer, req.params.{{modelName}}Id, req.body)
      .then(result => this.successResponse(res, { result }))
      .then(null, next);
  }

  remove(req, res, next) {
    this.commandExecuter.execute(this.remove{{ModelName}}Command, req.viewer, req.params.{{modelName}}Id)
      .then(result => this.successResponse(res, { result: { deleted: true, result: result._id } }))
      .then(null, next);
  }
}


IoC.singleton('{{modelName}}Controller', [
  '{{modelName}}Repository',
  'create{{ModelName}}Command',
  'update{{ModelName}}Command',
  'remove{{ModelName}}Command',
  'commandExecuter',
], {{ModelName}}Controller)
