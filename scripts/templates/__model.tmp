import { Schema } from 'mongoose';
import { checkEqualIds } from '../utils/mongo';
import uniqueValidator from 'mongoose-unique-validator';

import IoC from 'AppIoC';

export const {{modelName}}Model = (mongoose) => {
  const {{modelName}}Schema = new Schema({
    name: {type: String, required: true, unique: true},
    creator: {type: Schema.Types.ObjectId, ref: 'User', required:true},
  }, { timestamps: true, collection: 'new_{{modelsName}}' });

  /**
   * Check if id is the same
   * @param {ObjectId} {{modelName}} id
   * @return {boolean} true if the same {{modelName}}
   */
  {{modelName}}Schema.method('checkId', function(id) {
    return checkEqualIds(id, this._id);
  });

  /**
   * Get creator
   * @return {Object}
   */
  {{modelName}}Schema.method('getCreator', async function() {
    await this.populate('creator').execPopulate();
    return this.creator;
  });

  {{modelName}}Schema.plugin(uniqueValidator);

  return mongoose.model('{{ModelName}}', {{modelName}}Schema);
}

IoC.callable('{{modelName}}Model', ['connection'], {{modelName}}Model);
